using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Diagnostics;
using Golden_Ticket.Utilities;
using System.Management;

namespace Golden_Ticket.Windows
{
    public partial class OptionsWindow : Form
    {
        GameInfo gameInfo = new GameInfo();
        UpdateChecker updateChecker = new UpdateChecker();
        MachineInfo machineInfo = new MachineInfo();
        PathUtils pathUtils = new PathUtils();
        string cpuName;
        string winVer;
        string gpuName;
        string arch;
        ulong ramSize;
        List<string> specsExport;

        public OptionsWindow()
        {
            InitializeComponent();
        }

        private void OptionsWindow_Load(object sender, EventArgs e)
        {
            specsExport = new List<string>();
            launcherVersionLabel.Text = "Ver. " + updateChecker.LauncherVersion;
            gameLocationLabel.Text = gameInfo.GetInstallLocationFromReg();
            backgroundWorker1.RunWorkerAsync();
        }

        private void gameDirButton_Click(object sender, EventArgs e)
        {
            Process.Start(gameInfo.GetInstallLocationFromReg());
        }

        private void button1_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void launcherExitButton_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        void GetGPU()
        {
            ManagementObjectSearcher searcher
     = new ManagementObjectSearcher("SELECT * FROM Win32_DisplayConfiguration");

            foreach (ManagementObject mo in searcher.Get())
            {
                foreach (PropertyData property in mo.Properties)
                {
                    if (property.Name == "Description")
                    {
                        gpuName = property.Value.ToString();
                    }
                }
            }
        }

        public static string SendBackProcessorName()
        {
            ManagementObjectSearcher mosProcessor = new ManagementObjectSearcher("SELECT * FROM Win32_Processor");
            string Procname = null;

            foreach (ManagementObject moProcessor in mosProcessor.Get())
            {
                if (moProcessor["name"] != null)
                {
                    Procname = moProcessor["name"].ToString();

                }

            }

            return Procname;
        }

        private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
        {
            cpuName = SendBackProcessorName();
            winVer = machineInfo.WindowsVersion();
            GetGPU();
            ramSize = GetTotalMemoryInBytes();
        }

        private void backgroundWorker1_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            osLabel.Text = "OS: " + winVer;
            bool is64Bit = Environment.Is64BitOperatingSystem;
            if (is64Bit == true)
            {
                arch = "x64";
                archLabel.Text = "Arch: x64";
            }
            else
            {
                arch = "x86";
                archLabel.Text = "Arch: x86";
            }
            gpuLabel.Text = "GPU: " + gpuName;
            cpuLabel.Text = "CPU: " + cpuName;
            ramLabel.Text = "RAM: " + FormatBytes(ramSize);
            specsExportButton.Visible = true;
        }

        static ulong GetTotalMemoryInBytes()
        {
            return new Microsoft.VisualBasic.Devices.ComputerInfo().TotalPhysicalMemory;
        }

        private static string FormatBytes(ulong bytes)
        {
            string[] Suffix = { "B", "KB", "MB", "GB", "TB" };
            int i;
            double dblSByte = bytes;
            for (i = 0; i < Suffix.Length && bytes >= 1024; i++, bytes /= 1024)
            {
                dblSByte = bytes / 1024.0;
            }

            return String.Format("{0:0.##} {1}", dblSByte, Suffix[i]);
        }

        private void button1_Click_1(object sender, EventArgs e)
        {
            // Add system and some launcher info to the List
            // Also format with markdown to make it easier to read on Github/reddit...
            specsExport.Add("## Auto-Generated by Golden Ticket at " + DateTime.Now);
            specsExport.Add("");
            specsExport.Add("---");
            specsExport.Add("");
            specsExport.Add("* **OS:** " + winVer + arch);
            specsExport.Add("");
            specsExport.Add("* **CPU:** " + cpuName);
            specsExport.Add("");
            specsExport.Add("* **GPU:** " + gpuName);
            specsExport.Add("");
            specsExport.Add("* **RAM:** " + FormatBytes(ramSize));
            specsExport.Add("");
            specsExport.Add("* **Golden Ticket version:** " + updateChecker.LauncherVersion);
            // Conver to array
            specsExport.ToArray();
            try
            {
                System.IO.File.WriteAllLines(pathUtils.goldenTicketDocumentsFolder + "\\SystemSpecs.txt", specsExport);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Unknown error while exporting system specs. Please show this to the developer."
                    + Environment.NewLine + Environment.NewLine + ex.ToString());
            }
            DialogResult dialogResult = MessageBox.Show("Your system specs were successfully exported to a text file."
                + Environment.NewLine + "Location: " + pathUtils.goldenTicketDocumentsFolder + "\\SystemSpecs.txt"
                + Environment.NewLine + "Would you like to open the folder?", "System Specs were exported!",
                MessageBoxButtons.YesNo, MessageBoxIcon.Information);
            if(dialogResult == DialogResult.Yes)
            {
                Process.Start(pathUtils.goldenTicketDocumentsFolder);
            }
            else
            {
                // Nuffin.
            }
        }
    }
}
